% Script to generate the necessary data file for Experiment 4

rng(1000);

conf = struct;
conf.n = 5;

conf.call = cell(conf.n, 1);
conf.call(:) = {(1:10)'};

conf.cbask = struct;
conf.cbask.W = [1/5, 1/5, 1/5, 1/5, 1/5; ...
    1/4, 1/4, 1/4, 1/4, 0; ...
    0, 1/4, 1/4, 1/4, 1/4; ...
    1/4, 0, 1/4, 1/4, 1/4; ...
    1/4, 1/4, 1/4, 0, 1/4; ...
    1/4, 1/4, 0, 1/4, 1/4; ...
    1/3, 1/3, 1/3, 0, 0; ...
    0, 1/3, 1/3, 1/3, 0; ...
    0, 0, 1/3, 1/3, 1/3; ...
    0, 1/2, 1/2, 0, 0; ...
    0, 0, 1/2, 1/2, 0; ...
    0, 1/2, 0, 1/2, 0; ...
    1, -1, 0, 0, 0; ...
    1, 0, -1, 0, 0; ...
    1, 0, 0, -1, 0; ...
    0, 1, -1, 0, 0; ...
    0, 1, 0, -1, 0; ...
    0, 1, 0, 0, -1; ...
    0, 0, 1, -1, 0; ...
    0, 0, 1, 0, -1; ...
    0, 0, 0, 1, -1; ...
    -1, 1, 0, 0, 0; ...
    -1, 0, 1, 0, 0; ...
    -1, 0, 0, 1, 0; ...
    0, -1, 1, 0, 0; ...
    0, -1, 0, 1, 0; ...
    0, -1, 0, 0, 1; ...
    0, 0, -1, 1, 0; ...
    0, 0, -1, 0, 1; ...
    0, 0, 0, -1, 1];
conf.cbask.k = cell(30, 1);
conf.cbask.k(1:12) = {(1:10)'};
conf.cbask.k(13:30) = {(-5:5)'};

conf.cmax = struct;
conf.cmax.L = [1, 1, 1, 1, 1; ...
    1, 1, 1, 1, 0; ...
    0, 1, 1, 1, 1; ...
    0, 1, 1, 0, 0; ...
    0, 1, 0, 1, 0; ...
    0, 0, 1, 1, 0];
conf.cmax.k = cell(6, 1);
conf.cmax.k(1:6) = {(0:10)'};

boc_num = 10;
conf.boc = struct;
conf.boc.L = ones(boc_num, 5);
conf.boc.k = cell(boc_num, 1);
for j = 1:boc_num
    conf.boc.k{j} = randi([1, 10], 1, conf.n);
end

%   1: cash (1)
%   2-6: stocks (5)
%   7-56: vanilla options (10 * 5)
%   57-176: basket options (10 * 12)
%   177-374: spread options (11 * 18)
%   375-440: call-on-max (11 * 6)
%   441-450: best-of-calls that is priced (10)


% marginal
marg = cell(2, 1);
marg{1} = struct;
marg{1}.mu = [0.5; 1; 1; 0.5; 0.5];
marg{1}.sig2 = [0.2; 0.4; 0.2; 0.4; 0.2];
marg{2} = struct;
marg{2}.mu = [0.5; 1; 1; 0.5; 0.5];
marg{2}.sig2 = [0.3; 0.6; 0.3; 0.6; 0.3];

% dependence
A = [0.8, 0.2; ...
    0.5, 0.5; ...
    0.7, -0.3; ...
    0.2, 0.8; ...
    -0.4, 0.6];

dep = cell(2, 1);
B = A * diag([2, 1]) * A' + eye(5) * 1;
dB = sqrt(diag(B));
dep{1} = struct;
dep{1}.rho = B ./ dB ./ dB';
dep{1}.rho(1:(5 + 1):end) = 1;
dep{1}.nu = 3;
dep{2} = struct;
dep{2}.rho = dep{1}.rho;
dep{2}.nu = 10;


price_bounds = simoptprice(conf, 1e6, marg, dep);
price_bounds = roundprice(price_bounds, 3);

save('exp/exp4/exp4.mat', 'conf', 'price_bounds', 'marg', 'dep');